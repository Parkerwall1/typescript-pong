function startLoop(loop) {
    var lastFrame = null;
    var rAF;
    if (window.requestAnimationFrame) {
        rAF = window.requestAnimationFrame;
    } else {
        rAF = function (func) {
            window.setTimeout(func, 0);
        };
    }

    function nextFrame() {
        var now = new Date();
        var timeDelta;
        if (lastFrame == null) {
            timeDelta = 0;
        } else {
            timeDelta = (now.getTime() - lastFrame.getTime()) / 1000;
        }
        lastFrame = now;
        loop(timeDelta);
        rAF(nextFrame);
    }
    rAF(nextFrame);
}

function createDiv(container, className) {
    var el = document.createElement('div');
    el.className = className;
    container.appendChild(el);
    return el;
}
var KeyboardDelegate = (function () {
    function KeyboardDelegate() {
        var _this = this;
        this.handlers = [];
        document.addEventListener('keydown', function (event) {
            _this.handlers.forEach(function (handler) {
                return handler.onKeyDown(event.keyCode);
            });
        });
        document.addEventListener('keyup', function (event) {
            _this.handlers.forEach(function (handler) {
                return handler.onKeyUp(event.keyCode);
            });
        });
    }
    KeyboardDelegate.prototype.addHandler = function (handler) {
        this.handlers.push(handler);
    };
    return KeyboardDelegate;
})();
var WIDTH = 640;
var HEIGHT = 480;
var PADDLE_OFFSET = 16;
var GameAudio = (function () {
    function GameAudio() {
        if (window.AudioContext || window.webkitAudioContext) {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            this.gain = this.audioContext.createGainNode();
            this.oscillator = this.audioContext.createOscillator();
            this.gain.connect(this.audioContext.destination);
            this.oscillator.connect(this.gain);
            this.gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime);
            this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);
            this.oscillator.noteOn(this.audioContext.currentTime);
        }
    }
    GameAudio.prototype.playBallOut = function () {
        if (this.audioContext) {
            this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);
            this.oscillator.frequency.linearRampToValueAtTime(440, this.audioContext.currentTime + 0.10);
            this.oscillator.frequency.linearRampToValueAtTime(220, this.audioContext.currentTime + 0.35);
            this.gain.gain.linearRampToValueAtTime(0.25, this.audioContext.currentTime + 0.10);
            this.gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + 0.35);
        }
    };

    GameAudio.prototype.playPing = function () {
        if (this.audioContext) {
            this.oscillator.frequency.setValueAtTime(220 + Math.random() * 660, this.audioContext.currentTime);
            this.gain.gain.linearRampToValueAtTime(0.25, this.audioContext.currentTime + 0.10);
            this.gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + 0.20);
        }
    };
    return GameAudio;
})();
var Vector2 = (function () {
    function Vector2(x, y) {
        this.x = x;
        this.y = y;
    }
    Vector2.prototype.add = function (v) {
        return new Vector2(this.x + v.x, this.y + v.y);
    };

    Vector2.prototype.difference = function (v) {
        return new Vector2(this.x - v.x, this.y - v.y);
    };

    Vector2.prototype.scale = function (n) {
        return new Vector2(this.x * n, this.y * n);
    };

    Vector2.prototype.amplitude = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector2.reflectX = function (point, x) {
        return new Vector2(2 * x - point.x, point.y);
    };

    Vector2.reflectY = function (point, y) {
        return new Vector2(point.x, 2 * y - point.y);
    };
    return Vector2;
})();

function isInside(obstruction, point) {
    var difference = obstruction.position.difference(point);
    return Math.abs(difference.x) < obstruction.width / 2 && Math.abs(difference.y) < obstruction.height / 2;
}
function isOverlap(o1, o2) {
    var difference = o1.position.difference(o2.position);
    return Math.abs(difference.x) < o1.width / 2 + o2.width / 2 && Math.abs(difference.y) < o1.height / 2 + o2.height / 2;
}
var Score = (function () {
    function Score(element) {
        this.element = element;
        this.score = 0;
        this.updateElement();
    }
    Score.prototype.inc = function () {
        this.score += 1;
        this.updateElement();
    };

    Score.prototype.updateElement = function () {
        while (this.element.childNodes.length > 0) {
            this.element.removeChild(this.element.childNodes[0]);
        }
        this.element.appendChild(document.createTextNode(this.score.toString()));
    };
    return Score;
})();
var WIDTH = 640;
var HEIGHT = 480;
var PADDLE_OFFSET = 16;
var Vector2 = (function () {
    function Vector2(x, y) {
        this.x = x;
        this.y = y;
    }
    Vector2.prototype.add = function (v) {
        return new Vector2(this.x + v.x, this.y + v.y);
    };

    Vector2.prototype.difference = function (v) {
        return new Vector2(this.x - v.x, this.y - v.y);
    };

    Vector2.prototype.scale = function (n) {
        return new Vector2(this.x * n, this.y * n);
    };

    Vector2.prototype.amplitude = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector2.reflectX = function (point, x) {
        return new Vector2(2 * x - point.x, point.y);
    };

    Vector2.reflectY = function (point, y) {
        return new Vector2(point.x, 2 * y - point.y);
    };
    return Vector2;
})();

function isInside(obstruction, point) {
    var difference = obstruction.position.difference(point);
    return Math.abs(difference.x) < obstruction.width / 2 && Math.abs(difference.y) < obstruction.height / 2;
}
function isOverlap(o1, o2) {
    var difference = o1.position.difference(o2.position);
    return Math.abs(difference.x) < o1.width / 2 + o2.width / 2 && Math.abs(difference.y) < o1.height / 2 + o2.height / 2;
}
var Ball = (function () {
    function Ball(element, obstructions, onOut, onCollide) {
        this.element = element;
        this.obstructions = obstructions;
        this.onOut = onOut;
        this.onCollide = onCollide;
        this.width = 4;
        this.height = 4;
        this.element.style.position = 'absolute';
        this.element.style.width = this.width + 'px';
        this.element.style.height = this.height + 'px';

        this.reset();
    }
    Ball.prototype.reset = function () {
        this.position = new Vector2(WIDTH / 2, HEIGHT / 2);
        this.velocity = new Vector2(0, 0);
    };

    Ball.prototype.launch = function () {
        var angle = (Math.random() * Math.PI / 2) - Math.PI / 4;
        this.velocity = new Vector2((Math.random() > 0.5 ? 1 : -1) * Math.cos(angle) * 250, Math.sin(angle) * 250);
    };

    Ball.prototype.setPosition = function (position) {
        this.position = position;
        this.element.style.left = Math.round(this.position.x) + 'px';
        this.element.style.top = Math.round(this.position.y) + 'px';
    };

    Ball.prototype.update = function (timeDelta) {
        var _this = this;
        var nextPosition = this.position.add(this.velocity.scale(timeDelta));
        var verticalHit = function (reflectY) {
        };

        if (this.velocity.y < 0 && nextPosition.y - this.height / 2 < 0) {
            nextPosition = Vector2.reflectY(nextPosition, 0);
            this.velocity.y = -this.velocity.y;
            this.onCollide();
        }
        if (this.velocity.y > 0 && nextPosition.y + this.height / 2 > HEIGHT - 1) {
            nextPosition = Vector2.reflectY(nextPosition, HEIGHT - 1);
            this.velocity.y = -this.velocity.y;
            this.onCollide();
        }

        var nextObject = {
            position: nextPosition,
            width: this.width,
            height: this.height
        };

        this.obstructions.forEach(function (obstruction) {
            var isHit = isOverlap(obstruction, nextObject);
            if (_this.velocity.x < 0 && obstruction.position.x < _this.position.x && isHit) {
                nextPosition = Vector2.reflectX(nextPosition, obstruction.position.x + obstruction.width / 2);
                var amplitude = _this.velocity.amplitude() + 25;
                var angle = Math.random() * Math.PI / 2 - Math.PI / 4;
                _this.velocity = new Vector2(Math.cos(angle) * amplitude, Math.sin(angle) * amplitude);
                _this.onCollide();
            }
            if (_this.velocity.x > 0 && obstruction.position.x > _this.position.x && isHit) {
                nextPosition = Vector2.reflectX(nextPosition, obstruction.position.x - obstruction.width / 2);
                var amplitude = _this.velocity.amplitude() + 25;
                var angle = Math.PI + (Math.random() * Math.PI / 2 - Math.PI / 4);
                _this.velocity = new Vector2(Math.cos(angle) * amplitude, Math.sin(angle) * amplitude);
                _this.onCollide();
            }
        });

        this.setPosition(nextPosition);

        if (this.position.x < 0 || this.position.x >= WIDTH) {
            this.onOut();
        }
    };
    return Ball;
})();
var WIDTH = 640;
var HEIGHT = 480;
var PADDLE_OFFSET = 16;
var Vector2 = (function () {
    function Vector2(x, y) {
        this.x = x;
        this.y = y;
    }
    Vector2.prototype.add = function (v) {
        return new Vector2(this.x + v.x, this.y + v.y);
    };

    Vector2.prototype.difference = function (v) {
        return new Vector2(this.x - v.x, this.y - v.y);
    };

    Vector2.prototype.scale = function (n) {
        return new Vector2(this.x * n, this.y * n);
    };

    Vector2.prototype.amplitude = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector2.reflectX = function (point, x) {
        return new Vector2(2 * x - point.x, point.y);
    };

    Vector2.reflectY = function (point, y) {
        return new Vector2(point.x, 2 * y - point.y);
    };
    return Vector2;
})();

function isInside(obstruction, point) {
    var difference = obstruction.position.difference(point);
    return Math.abs(difference.x) < obstruction.width / 2 && Math.abs(difference.y) < obstruction.height / 2;
}
function isOverlap(o1, o2) {
    var difference = o1.position.difference(o2.position);
    return Math.abs(difference.x) < o1.width / 2 + o2.width / 2 && Math.abs(difference.y) < o1.height / 2 + o2.height / 2;
}
var Ball = (function () {
    function Ball(element, obstructions, onOut, onCollide) {
        this.element = element;
        this.obstructions = obstructions;
        this.onOut = onOut;
        this.onCollide = onCollide;
        this.width = 4;
        this.height = 4;
        this.element.style.position = 'absolute';
        this.element.style.width = this.width + 'px';
        this.element.style.height = this.height + 'px';

        this.reset();
    }
    Ball.prototype.reset = function () {
        this.position = new Vector2(WIDTH / 2, HEIGHT / 2);
        this.velocity = new Vector2(0, 0);
    };

    Ball.prototype.launch = function () {
        var angle = (Math.random() * Math.PI / 2) - Math.PI / 4;
        this.velocity = new Vector2((Math.random() > 0.5 ? 1 : -1) * Math.cos(angle) * 250, Math.sin(angle) * 250);
    };

    Ball.prototype.setPosition = function (position) {
        this.position = position;
        this.element.style.left = Math.round(this.position.x) + 'px';
        this.element.style.top = Math.round(this.position.y) + 'px';
    };

    Ball.prototype.update = function (timeDelta) {
        var _this = this;
        var nextPosition = this.position.add(this.velocity.scale(timeDelta));
        var verticalHit = function (reflectY) {
        };

        if (this.velocity.y < 0 && nextPosition.y - this.height / 2 < 0) {
            nextPosition = Vector2.reflectY(nextPosition, 0);
            this.velocity.y = -this.velocity.y;
            this.onCollide();
        }
        if (this.velocity.y > 0 && nextPosition.y + this.height / 2 > HEIGHT - 1) {
            nextPosition = Vector2.reflectY(nextPosition, HEIGHT - 1);
            this.velocity.y = -this.velocity.y;
            this.onCollide();
        }

        var nextObject = {
            position: nextPosition,
            width: this.width,
            height: this.height
        };

        this.obstructions.forEach(function (obstruction) {
            var isHit = isOverlap(obstruction, nextObject);
            if (_this.velocity.x < 0 && obstruction.position.x < _this.position.x && isHit) {
                nextPosition = Vector2.reflectX(nextPosition, obstruction.position.x + obstruction.width / 2);
                var amplitude = _this.velocity.amplitude() + 25;
                var angle = Math.random() * Math.PI / 2 - Math.PI / 4;
                _this.velocity = new Vector2(Math.cos(angle) * amplitude, Math.sin(angle) * amplitude);
                _this.onCollide();
            }
            if (_this.velocity.x > 0 && obstruction.position.x > _this.position.x && isHit) {
                nextPosition = Vector2.reflectX(nextPosition, obstruction.position.x - obstruction.width / 2);
                var amplitude = _this.velocity.amplitude() + 25;
                var angle = Math.PI + (Math.random() * Math.PI / 2 - Math.PI / 4);
                _this.velocity = new Vector2(Math.cos(angle) * amplitude, Math.sin(angle) * amplitude);
                _this.onCollide();
            }
        });

        this.setPosition(nextPosition);

        if (this.position.x < 0 || this.position.x >= WIDTH) {
            this.onOut();
        }
    };
    return Ball;
})();
var PlayerSide;
(function (PlayerSide) {
    PlayerSide[PlayerSide["Left"] = 0] = "Left";

    PlayerSide[PlayerSide["Right"] = 1] = "Right";
})(PlayerSide || (PlayerSide = {}));
var PaddleState;
(function (PaddleState) {
    PaddleState[PaddleState["Stationary"] = 0] = "Stationary";
    PaddleState[PaddleState["MovingUp"] = 1] = "MovingUp";

    PaddleState[PaddleState["MovingDown"] = 2] = "MovingDown";
})(PaddleState || (PaddleState = {}));

var Paddle = (function () {
    function Paddle(element, side) {
        this.element = element;
        this.side = side;
        this.width = 8;
        this.height = 64;
        this.following = false;
        this.target = null;
        this.state = PaddleState.Stationary;
        this.element.style.position = 'absolute';
        this.element.style.width = this.width + 'px';
        this.element.style.height = this.height + 'px';

        this.reset();
    }
    Paddle.prototype.setPosition = function (newPosition) {
        this.position = newPosition;
        if (this.position.y <= this.height / 2) {
            this.position.y = this.height / 2;
        } else if (this.position.y >= HEIGHT - this.height / 2) {
            this.position.y = HEIGHT - this.height / 2;
        }
        this.element.style.top = Math.round(this.position.y - this.height / 2) + 'px';
        this.element.style.left = Math.round(this.position.x - this.width / 2) + 'px';
    };

    Paddle.prototype.reset = function () {
        this.setPosition(new Vector2(this.side == PlayerSide.Left ? PADDLE_OFFSET : WIDTH - PADDLE_OFFSET, HEIGHT / 2));
        this.state = PaddleState.Stationary;
    };

    Paddle.prototype.goUp = function () {
        this.state = PaddleState.MovingUp;
    };
    Paddle.prototype.goDown = function () {
        this.state = PaddleState.MovingDown;
    };
    Paddle.prototype.releaseUp = function () {
        if (this.state == PaddleState.MovingUp) {
            this.state = PaddleState.Stationary;
        }
    };
    Paddle.prototype.releaseDown = function () {
        if (this.state == PaddleState.MovingDown) {
            this.state = PaddleState.Stationary;
        }
    };
    Paddle.prototype.stop = function () {
        this.state = PaddleState.Stationary;
    };

    Paddle.prototype.follow = function (ball) {
        this.following = true;
        this.target = ball;
    };

    Paddle.prototype.updateAI = function () {
        if ((this.target.position.x < this.position.x && this.target.velocity.x > 0) || (this.target.position.x > this.position.x && this.target.velocity.x < 0)) {
            if (Math.abs(this.target.position.y - this.position.y) < this.height / 4) {
                this.stop();
            } else if (this.state == PaddleState.Stationary) {
                if (this.position.y > this.target.position.y) {
                    this.goUp();
                } else {
                    this.goDown();
                }
            }
        } else {
            this.stop();
        }
    };

    Paddle.prototype.update = function (timeDelta) {
        if (this.following) {
            this.updateAI();
        }

        var dy = 0;
        switch (this.state) {
            case PaddleState.Stationary:
                dy = 0;
                break;
            case PaddleState.MovingUp:
                dy = -240;
                break;
            case PaddleState.MovingDown:
                dy = 240;
                break;
        }
        this.setPosition(new Vector2(this.position.x, (timeDelta * dy) + this.position.y));
    };
    return Paddle;
})();
var WIDTH = 640;
var HEIGHT = 480;
var PADDLE_OFFSET = 16;
var Vector2 = (function () {
    function Vector2(x, y) {
        this.x = x;
        this.y = y;
    }
    Vector2.prototype.add = function (v) {
        return new Vector2(this.x + v.x, this.y + v.y);
    };

    Vector2.prototype.difference = function (v) {
        return new Vector2(this.x - v.x, this.y - v.y);
    };

    Vector2.prototype.scale = function (n) {
        return new Vector2(this.x * n, this.y * n);
    };

    Vector2.prototype.amplitude = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector2.reflectX = function (point, x) {
        return new Vector2(2 * x - point.x, point.y);
    };

    Vector2.reflectY = function (point, y) {
        return new Vector2(point.x, 2 * y - point.y);
    };
    return Vector2;
})();

function isInside(obstruction, point) {
    var difference = obstruction.position.difference(point);
    return Math.abs(difference.x) < obstruction.width / 2 && Math.abs(difference.y) < obstruction.height / 2;
}
function isOverlap(o1, o2) {
    var difference = o1.position.difference(o2.position);
    return Math.abs(difference.x) < o1.width / 2 + o2.width / 2 && Math.abs(difference.y) < o1.height / 2 + o2.height / 2;
}
var Ball = (function () {
    function Ball(element, obstructions, onOut, onCollide) {
        this.element = element;
        this.obstructions = obstructions;
        this.onOut = onOut;
        this.onCollide = onCollide;
        this.width = 4;
        this.height = 4;
        this.element.style.position = 'absolute';
        this.element.style.width = this.width + 'px';
        this.element.style.height = this.height + 'px';

        this.reset();
    }
    Ball.prototype.reset = function () {
        this.position = new Vector2(WIDTH / 2, HEIGHT / 2);
        this.velocity = new Vector2(0, 0);
    };

    Ball.prototype.launch = function () {
        var angle = (Math.random() * Math.PI / 2) - Math.PI / 4;
        this.velocity = new Vector2((Math.random() > 0.5 ? 1 : -1) * Math.cos(angle) * 250, Math.sin(angle) * 250);
    };

    Ball.prototype.setPosition = function (position) {
        this.position = position;
        this.element.style.left = Math.round(this.position.x) + 'px';
        this.element.style.top = Math.round(this.position.y) + 'px';
    };

    Ball.prototype.update = function (timeDelta) {
        var _this = this;
        var nextPosition = this.position.add(this.velocity.scale(timeDelta));
        var verticalHit = function (reflectY) {
        };

        if (this.velocity.y < 0 && nextPosition.y - this.height / 2 < 0) {
            nextPosition = Vector2.reflectY(nextPosition, 0);
            this.velocity.y = -this.velocity.y;
            this.onCollide();
        }
        if (this.velocity.y > 0 && nextPosition.y + this.height / 2 > HEIGHT - 1) {
            nextPosition = Vector2.reflectY(nextPosition, HEIGHT - 1);
            this.velocity.y = -this.velocity.y;
            this.onCollide();
        }

        var nextObject = {
            position: nextPosition,
            width: this.width,
            height: this.height
        };

        this.obstructions.forEach(function (obstruction) {
            var isHit = isOverlap(obstruction, nextObject);
            if (_this.velocity.x < 0 && obstruction.position.x < _this.position.x && isHit) {
                nextPosition = Vector2.reflectX(nextPosition, obstruction.position.x + obstruction.width / 2);
                var amplitude = _this.velocity.amplitude() + 25;
                var angle = Math.random() * Math.PI / 2 - Math.PI / 4;
                _this.velocity = new Vector2(Math.cos(angle) * amplitude, Math.sin(angle) * amplitude);
                _this.onCollide();
            }
            if (_this.velocity.x > 0 && obstruction.position.x > _this.position.x && isHit) {
                nextPosition = Vector2.reflectX(nextPosition, obstruction.position.x - obstruction.width / 2);
                var amplitude = _this.velocity.amplitude() + 25;
                var angle = Math.PI + (Math.random() * Math.PI / 2 - Math.PI / 4);
                _this.velocity = new Vector2(Math.cos(angle) * amplitude, Math.sin(angle) * amplitude);
                _this.onCollide();
            }
        });

        this.setPosition(nextPosition);

        if (this.position.x < 0 || this.position.x >= WIDTH) {
            this.onOut();
        }
    };
    return Ball;
})();
var GameAudio = (function () {
    function GameAudio() {
        if (window.AudioContext || window.webkitAudioContext) {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            this.gain = this.audioContext.createGainNode();
            this.oscillator = this.audioContext.createOscillator();
            this.gain.connect(this.audioContext.destination);
            this.oscillator.connect(this.gain);
            this.gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime);
            this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);
            this.oscillator.noteOn(this.audioContext.currentTime);
        }
    }
    GameAudio.prototype.playBallOut = function () {
        if (this.audioContext) {
            this.oscillator.frequency.setValueAtTime(440, this.audioContext.currentTime);
            this.oscillator.frequency.linearRampToValueAtTime(440, this.audioContext.currentTime + 0.10);
            this.oscillator.frequency.linearRampToValueAtTime(220, this.audioContext.currentTime + 0.35);
            this.gain.gain.linearRampToValueAtTime(0.25, this.audioContext.currentTime + 0.10);
            this.gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + 0.35);
        }
    };

    GameAudio.prototype.playPing = function () {
        if (this.audioContext) {
            this.oscillator.frequency.setValueAtTime(220 + Math.random() * 660, this.audioContext.currentTime);
            this.gain.gain.linearRampToValueAtTime(0.25, this.audioContext.currentTime + 0.10);
            this.gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + 0.20);
        }
    };
    return GameAudio;
})();
function startLoop(loop) {
    var lastFrame = null;
    var rAF;
    if (window.requestAnimationFrame) {
        rAF = window.requestAnimationFrame;
    } else {
        rAF = function (func) {
            window.setTimeout(func, 0);
        };
    }

    function nextFrame() {
        var now = new Date();
        var timeDelta;
        if (lastFrame == null) {
            timeDelta = 0;
        } else {
            timeDelta = (now.getTime() - lastFrame.getTime()) / 1000;
        }
        lastFrame = now;
        loop(timeDelta);
        rAF(nextFrame);
    }
    rAF(nextFrame);
}

function createDiv(container, className) {
    var el = document.createElement('div');
    el.className = className;
    container.appendChild(el);
    return el;
}
var KeyboardDelegate = (function () {
    function KeyboardDelegate() {
        var _this = this;
        this.handlers = [];
        document.addEventListener('keydown', function (event) {
            _this.handlers.forEach(function (handler) {
                return handler.onKeyDown(event.keyCode);
            });
        });
        document.addEventListener('keyup', function (event) {
            _this.handlers.forEach(function (handler) {
                return handler.onKeyUp(event.keyCode);
            });
        });
    }
    KeyboardDelegate.prototype.addHandler = function (handler) {
        this.handlers.push(handler);
    };
    return KeyboardDelegate;
})();
var PlayerSide;
(function (PlayerSide) {
    PlayerSide[PlayerSide["Left"] = 0] = "Left";

    PlayerSide[PlayerSide["Right"] = 1] = "Right";
})(PlayerSide || (PlayerSide = {}));
var PaddleState;
(function (PaddleState) {
    PaddleState[PaddleState["Stationary"] = 0] = "Stationary";
    PaddleState[PaddleState["MovingUp"] = 1] = "MovingUp";

    PaddleState[PaddleState["MovingDown"] = 2] = "MovingDown";
})(PaddleState || (PaddleState = {}));

var Paddle = (function () {
    function Paddle(element, side) {
        this.element = element;
        this.side = side;
        this.width = 8;
        this.height = 64;
        this.following = false;
        this.target = null;
        this.state = PaddleState.Stationary;
        this.element.style.position = 'absolute';
        this.element.style.width = this.width + 'px';
        this.element.style.height = this.height + 'px';

        this.reset();
    }
    Paddle.prototype.setPosition = function (newPosition) {
        this.position = newPosition;
        if (this.position.y <= this.height / 2) {
            this.position.y = this.height / 2;
        } else if (this.position.y >= HEIGHT - this.height / 2) {
            this.position.y = HEIGHT - this.height / 2;
        }
        this.element.style.top = Math.round(this.position.y - this.height / 2) + 'px';
        this.element.style.left = Math.round(this.position.x - this.width / 2) + 'px';
    };

    Paddle.prototype.reset = function () {
        this.setPosition(new Vector2(this.side == PlayerSide.Left ? PADDLE_OFFSET : WIDTH - PADDLE_OFFSET, HEIGHT / 2));
        this.state = PaddleState.Stationary;
    };

    Paddle.prototype.goUp = function () {
        this.state = PaddleState.MovingUp;
    };
    Paddle.prototype.goDown = function () {
        this.state = PaddleState.MovingDown;
    };
    Paddle.prototype.releaseUp = function () {
        if (this.state == PaddleState.MovingUp) {
            this.state = PaddleState.Stationary;
        }
    };
    Paddle.prototype.releaseDown = function () {
        if (this.state == PaddleState.MovingDown) {
            this.state = PaddleState.Stationary;
        }
    };
    Paddle.prototype.stop = function () {
        this.state = PaddleState.Stationary;
    };

    Paddle.prototype.follow = function (ball) {
        this.following = true;
        this.target = ball;
    };

    Paddle.prototype.updateAI = function () {
        if ((this.target.position.x < this.position.x && this.target.velocity.x > 0) || (this.target.position.x > this.position.x && this.target.velocity.x < 0)) {
            if (Math.abs(this.target.position.y - this.position.y) < this.height / 4) {
                this.stop();
            } else if (this.state == PaddleState.Stationary) {
                if (this.position.y > this.target.position.y) {
                    this.goUp();
                } else {
                    this.goDown();
                }
            }
        } else {
            this.stop();
        }
    };

    Paddle.prototype.update = function (timeDelta) {
        if (this.following) {
            this.updateAI();
        }

        var dy = 0;
        switch (this.state) {
            case PaddleState.Stationary:
                dy = 0;
                break;
            case PaddleState.MovingUp:
                dy = -240;
                break;
            case PaddleState.MovingDown:
                dy = 240;
                break;
        }
        this.setPosition(new Vector2(this.position.x, (timeDelta * dy) + this.position.y));
    };
    return Paddle;
})();
var Score = (function () {
    function Score(element) {
        this.element = element;
        this.score = 0;
        this.updateElement();
    }
    Score.prototype.inc = function () {
        this.score += 1;
        this.updateElement();
    };

    Score.prototype.updateElement = function () {
        while (this.element.childNodes.length > 0) {
            this.element.removeChild(this.element.childNodes[0]);
        }
        this.element.appendChild(document.createTextNode(this.score.toString()));
    };
    return Score;
})();
var GameState;
(function (GameState) {
    GameState[GameState["Reset"] = 0] = "Reset";
    GameState[GameState["Ready"] = 1] = "Ready";

    GameState[GameState["Playing"] = 2] = "Playing";
})(GameState || (GameState = {}));

var Game = (function () {
    function Game(container) {
        var _this = this;
        this.container = container;
        this.state = GameState.Reset;
        this.audio = new GameAudio();

        this.container.style.position = 'relative';
        this.container.style.width = WIDTH + 'px';
        this.container.style.height = HEIGHT + 'px';

        this.startEl = createDiv(container, 'start');
        this.startEl.appendChild(document.createTextNode('Press Spacebar'));

        this.playerScore = new Score(createDiv(container, 'score player'));
        this.cpuScore = new Score(createDiv(container, 'score cpu'));

        this.player = new Paddle(createDiv(container, 'paddle'), PlayerSide.Left);
        this.cpu = new Paddle(createDiv(container, 'paddle'), PlayerSide.Right);
        this.ball = new Ball(createDiv(container, 'ball'), [this.player, this.cpu], this.onBallOut.bind(this), this.audio.playPing.bind(this.audio));
        this.cpu.follow(this.ball);

        this.objects = [this.player, this.cpu, this.ball];

        startLoop(function (timeDelta) {
            _this.objects.forEach(function (go) {
                go.update(timeDelta);
            });
        });
    }
    Game.prototype.reset = function () {
        this.ball.reset();
        this.player.reset();
        this.cpu.reset();
        this.startEl.style.display = 'block';
        this.state = GameState.Ready;
    };

    Game.prototype.startGame = function () {
        this.startEl.style.display = 'none';
        this.state = GameState.Playing;
        this.ball.launch();
    };

    Game.prototype.onBallOut = function () {
        this.audio.playBallOut();

        if (this.ball.position.x < WIDTH / 2) {
            this.cpuScore.inc();
        } else {
            this.playerScore.inc();
        }
        this.reset();
    };

    Game.prototype.onKeyDown = function (keyCode) {
        if (this.state == GameState.Playing) {
            if (keyCode == 38)
                this.player.goUp();
            if (keyCode == 40)
                this.player.goDown();
        }
        if (this.state == GameState.Ready) {
            if (keyCode == 32)
                this.startGame();
        }
    };

    Game.prototype.onKeyUp = function (keyCode) {
        if (this.state == GameState.Playing) {
            if (keyCode == 38)
                this.player.releaseUp();
            if (keyCode == 40)
                this.player.releaseDown();
        }
    };
    return Game;
})();

var keyboardDelegate = new KeyboardDelegate();
var game = new Game(document.getElementById('pong'));
keyboardDelegate.addHandler(game);
game.reset();
